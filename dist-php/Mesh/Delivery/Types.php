<?php
namespace Mesh\Delivery;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 배송 상태
 */
final class DeliveryStatus {
  /**
   * 주문 접수됨
   */
  const SUBMITTED = 1;
  /**
   * 배송기사가 배정됨
   */
  const DELIVERING = 2;
  /**
   * 물품을 전달함
   */
  const COMPLETED = 10;
  /**
   * 배송 취소됨
   */
  const CANCELLED = 11;
  static public $__names = array(
    1 => 'SUBMITTED',
    2 => 'DELIVERING',
    10 => 'COMPLETED',
    11 => 'CANCELLED',
  );
}

final class Gender {
  const FEMALE = 1;
  const MALE = 2;
  static public $__names = array(
    1 => 'FEMALE',
    2 => 'MALE',
  );
}

/**
 * 오류 코드
 */
final class ErrorCode {
  /**
   * No information available about the error
   */
  const UNKNOWN = 1;
  /**
   * The format of the request data was incorrect
   */
  const BAD_DATA_FORMAT = 2;
  /**
   * A required parameter/field was absent
   */
  const DATA_REQUIRED = 3;
  /**
   * Access token is invalid
   */
  const INVALID_AUTH = 4;
  static public $__names = array(
    1 => 'UNKNOWN',
    2 => 'BAD_DATA_FORMAT',
    3 => 'DATA_REQUIRED',
    4 => 'INVALID_AUTH',
  );
}

/**
 * 배송기사
 */
class Courier {
  static $_TSPEC;

  /**
   * 아이디
   * 
   * @var int
   */
  public $id = null;
  /**
   * 이름
   * 
   * @var string
   */
  public $name = null;
  /**
   * 전화번호
   * 
   * @var string
   */
  public $phone = null;
  /**
   * @var int
   */
  public $gender = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gender',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
    }
  }

  public function getName() {
    return 'Courier';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Courier');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 3);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I32, 4);
      $xfer += $output->writeI32($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 위치 정보
 */
class LatLng {
  static $_TSPEC;

  /**
   * 위도
   * 
   * @var double
   */
  public $lat = null;
  /**
   * 경도
   * 
   * @var double
   */
  public $lng = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lat',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'lng',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lng'])) {
        $this->lng = $vals['lng'];
      }
    }
  }

  public function getName() {
    return 'LatLng';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lng);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LatLng');
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lng !== null) {
      $xfer += $output->writeFieldBegin('lng', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->lng);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 배송 주문
 */
class Delivery {
  static $_TSPEC;

  /**
   * 주문 번호
   * 
   * @var string
   */
  public $id = null;
  /**
   * 출발지
   * 
   * @var \Mesh\Delivery\LatLng
   */
  public $origin = null;
  /**
   * 도착지
   * 
   * @var \Mesh\Delivery\LatLng
   */
  public $destination = null;
  /**
   * 주문 상태
   * 
   * @var int
   */
  public $status = null;
  /**
   * 주문 수행 배송기사
   * 
   * @var \Mesh\Delivery\Courier
   */
  public $courier = null;
  /**
   * 접수 시각
   * 
   * @var int
   */
  public $createdAt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'origin',
          'type' => TType::STRUCT,
          'class' => '\Mesh\Delivery\LatLng',
          ),
        3 => array(
          'var' => 'destination',
          'type' => TType::STRUCT,
          'class' => '\Mesh\Delivery\LatLng',
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'courier',
          'type' => TType::STRUCT,
          'class' => '\Mesh\Delivery\Courier',
          ),
        6 => array(
          'var' => 'createdAt',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['origin'])) {
        $this->origin = $vals['origin'];
      }
      if (isset($vals['destination'])) {
        $this->destination = $vals['destination'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['courier'])) {
        $this->courier = $vals['courier'];
      }
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
    }
  }

  public function getName() {
    return 'Delivery';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->origin = new \Mesh\Delivery\LatLng();
            $xfer += $this->origin->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->destination = new \Mesh\Delivery\LatLng();
            $xfer += $this->destination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->courier = new \Mesh\Delivery\Courier();
            $xfer += $this->courier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Delivery');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->origin !== null) {
      if (!is_object($this->origin)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('origin', TType::STRUCT, 2);
      $xfer += $this->origin->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination !== null) {
      if (!is_object($this->destination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('destination', TType::STRUCT, 3);
      $xfer += $this->destination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->courier !== null) {
      if (!is_object($this->courier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('courier', TType::STRUCT, 5);
      $xfer += $this->courier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::I64, 6);
      $xfer += $output->writeI64($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ServiceException extends TException {
  static $_TSPEC;

  /**
   * The numeric code indicating the type of error that occurred.
   * 
   * @var int
   */
  public $code = null;
  /**
   * If the error applied to a particular input parameter, this will indicate which parameter.
   * 
   * @var string
   */
  public $parameter = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'parameter',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['parameter'])) {
        $this->parameter = $vals['parameter'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ServiceException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parameter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServiceException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameter !== null) {
      $xfer += $output->writeFieldBegin('parameter', TType::STRING, 2);
      $xfer += $output->writeString($this->parameter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


