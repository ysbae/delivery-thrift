/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mesh.delivery;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-2-2")
public class DeliveryService {

  public interface Iface {

    public Delivery submitDelivery(String accessToken, Delivery delivery) throws ServiceException, org.apache.thrift.TException;

    public Delivery getDelivery(String accessToken, int deliveryId) throws ServiceException, org.apache.thrift.TException;

    public List<Delivery> listDeliveries(String accessToken, int offset, int limit) throws ServiceException, org.apache.thrift.TException;

    public Delivery assignCourier(String accessToken, int deliveryId, int courierId) throws ServiceException, org.apache.thrift.TException;

    public Delivery cancelDelivery(String accessToken, int deliveryId) throws ServiceException, org.apache.thrift.TException;

    public Delivery completeDelivery(String accessToken, int deliveryId) throws ServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void submitDelivery(String accessToken, Delivery delivery, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDelivery(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listDeliveries(String accessToken, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assignCourier(String accessToken, int deliveryId, int courierId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelDelivery(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void completeDelivery(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Delivery submitDelivery(String accessToken, Delivery delivery) throws ServiceException, org.apache.thrift.TException
    {
      send_submitDelivery(accessToken, delivery);
      return recv_submitDelivery();
    }

    public void send_submitDelivery(String accessToken, Delivery delivery) throws org.apache.thrift.TException
    {
      submitDelivery_args args = new submitDelivery_args();
      args.setAccessToken(accessToken);
      args.setDelivery(delivery);
      sendBase("submitDelivery", args);
    }

    public Delivery recv_submitDelivery() throws ServiceException, org.apache.thrift.TException
    {
      submitDelivery_result result = new submitDelivery_result();
      receiveBase(result, "submitDelivery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitDelivery failed: unknown result");
    }

    public Delivery getDelivery(String accessToken, int deliveryId) throws ServiceException, org.apache.thrift.TException
    {
      send_getDelivery(accessToken, deliveryId);
      return recv_getDelivery();
    }

    public void send_getDelivery(String accessToken, int deliveryId) throws org.apache.thrift.TException
    {
      getDelivery_args args = new getDelivery_args();
      args.setAccessToken(accessToken);
      args.setDeliveryId(deliveryId);
      sendBase("getDelivery", args);
    }

    public Delivery recv_getDelivery() throws ServiceException, org.apache.thrift.TException
    {
      getDelivery_result result = new getDelivery_result();
      receiveBase(result, "getDelivery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDelivery failed: unknown result");
    }

    public List<Delivery> listDeliveries(String accessToken, int offset, int limit) throws ServiceException, org.apache.thrift.TException
    {
      send_listDeliveries(accessToken, offset, limit);
      return recv_listDeliveries();
    }

    public void send_listDeliveries(String accessToken, int offset, int limit) throws org.apache.thrift.TException
    {
      listDeliveries_args args = new listDeliveries_args();
      args.setAccessToken(accessToken);
      args.setOffset(offset);
      args.setLimit(limit);
      sendBase("listDeliveries", args);
    }

    public List<Delivery> recv_listDeliveries() throws ServiceException, org.apache.thrift.TException
    {
      listDeliveries_result result = new listDeliveries_result();
      receiveBase(result, "listDeliveries");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listDeliveries failed: unknown result");
    }

    public Delivery assignCourier(String accessToken, int deliveryId, int courierId) throws ServiceException, org.apache.thrift.TException
    {
      send_assignCourier(accessToken, deliveryId, courierId);
      return recv_assignCourier();
    }

    public void send_assignCourier(String accessToken, int deliveryId, int courierId) throws org.apache.thrift.TException
    {
      assignCourier_args args = new assignCourier_args();
      args.setAccessToken(accessToken);
      args.setDeliveryId(deliveryId);
      args.setCourierId(courierId);
      sendBase("assignCourier", args);
    }

    public Delivery recv_assignCourier() throws ServiceException, org.apache.thrift.TException
    {
      assignCourier_result result = new assignCourier_result();
      receiveBase(result, "assignCourier");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assignCourier failed: unknown result");
    }

    public Delivery cancelDelivery(String accessToken, int deliveryId) throws ServiceException, org.apache.thrift.TException
    {
      send_cancelDelivery(accessToken, deliveryId);
      return recv_cancelDelivery();
    }

    public void send_cancelDelivery(String accessToken, int deliveryId) throws org.apache.thrift.TException
    {
      cancelDelivery_args args = new cancelDelivery_args();
      args.setAccessToken(accessToken);
      args.setDeliveryId(deliveryId);
      sendBase("cancelDelivery", args);
    }

    public Delivery recv_cancelDelivery() throws ServiceException, org.apache.thrift.TException
    {
      cancelDelivery_result result = new cancelDelivery_result();
      receiveBase(result, "cancelDelivery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelDelivery failed: unknown result");
    }

    public Delivery completeDelivery(String accessToken, int deliveryId) throws ServiceException, org.apache.thrift.TException
    {
      send_completeDelivery(accessToken, deliveryId);
      return recv_completeDelivery();
    }

    public void send_completeDelivery(String accessToken, int deliveryId) throws org.apache.thrift.TException
    {
      completeDelivery_args args = new completeDelivery_args();
      args.setAccessToken(accessToken);
      args.setDeliveryId(deliveryId);
      sendBase("completeDelivery", args);
    }

    public Delivery recv_completeDelivery() throws ServiceException, org.apache.thrift.TException
    {
      completeDelivery_result result = new completeDelivery_result();
      receiveBase(result, "completeDelivery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "completeDelivery failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void submitDelivery(String accessToken, Delivery delivery, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitDelivery_call method_call = new submitDelivery_call(accessToken, delivery, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitDelivery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private Delivery delivery;
      public submitDelivery_call(String accessToken, Delivery delivery, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.delivery = delivery;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitDelivery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitDelivery_args args = new submitDelivery_args();
        args.setAccessToken(accessToken);
        args.setDelivery(delivery);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Delivery getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitDelivery();
      }
    }

    public void getDelivery(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDelivery_call method_call = new getDelivery_call(accessToken, deliveryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDelivery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private int deliveryId;
      public getDelivery_call(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.deliveryId = deliveryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDelivery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDelivery_args args = new getDelivery_args();
        args.setAccessToken(accessToken);
        args.setDeliveryId(deliveryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Delivery getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDelivery();
      }
    }

    public void listDeliveries(String accessToken, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listDeliveries_call method_call = new listDeliveries_call(accessToken, offset, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listDeliveries_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private int offset;
      private int limit;
      public listDeliveries_call(String accessToken, int offset, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.offset = offset;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDeliveries", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listDeliveries_args args = new listDeliveries_args();
        args.setAccessToken(accessToken);
        args.setOffset(offset);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Delivery> getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDeliveries();
      }
    }

    public void assignCourier(String accessToken, int deliveryId, int courierId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assignCourier_call method_call = new assignCourier_call(accessToken, deliveryId, courierId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assignCourier_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private int deliveryId;
      private int courierId;
      public assignCourier_call(String accessToken, int deliveryId, int courierId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.deliveryId = deliveryId;
        this.courierId = courierId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assignCourier", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assignCourier_args args = new assignCourier_args();
        args.setAccessToken(accessToken);
        args.setDeliveryId(deliveryId);
        args.setCourierId(courierId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Delivery getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assignCourier();
      }
    }

    public void cancelDelivery(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelDelivery_call method_call = new cancelDelivery_call(accessToken, deliveryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelDelivery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private int deliveryId;
      public cancelDelivery_call(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.deliveryId = deliveryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelDelivery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelDelivery_args args = new cancelDelivery_args();
        args.setAccessToken(accessToken);
        args.setDeliveryId(deliveryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Delivery getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelDelivery();
      }
    }

    public void completeDelivery(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      completeDelivery_call method_call = new completeDelivery_call(accessToken, deliveryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class completeDelivery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private int deliveryId;
      public completeDelivery_call(String accessToken, int deliveryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.deliveryId = deliveryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("completeDelivery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        completeDelivery_args args = new completeDelivery_args();
        args.setAccessToken(accessToken);
        args.setDeliveryId(deliveryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Delivery getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_completeDelivery();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("submitDelivery", new submitDelivery());
      processMap.put("getDelivery", new getDelivery());
      processMap.put("listDeliveries", new listDeliveries());
      processMap.put("assignCourier", new assignCourier());
      processMap.put("cancelDelivery", new cancelDelivery());
      processMap.put("completeDelivery", new completeDelivery());
      return processMap;
    }

    public static class submitDelivery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitDelivery_args> {
      public submitDelivery() {
        super("submitDelivery");
      }

      public submitDelivery_args getEmptyArgsInstance() {
        return new submitDelivery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitDelivery_result getResult(I iface, submitDelivery_args args) throws org.apache.thrift.TException {
        submitDelivery_result result = new submitDelivery_result();
        try {
          result.success = iface.submitDelivery(args.accessToken, args.delivery);
        } catch (ServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getDelivery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDelivery_args> {
      public getDelivery() {
        super("getDelivery");
      }

      public getDelivery_args getEmptyArgsInstance() {
        return new getDelivery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDelivery_result getResult(I iface, getDelivery_args args) throws org.apache.thrift.TException {
        getDelivery_result result = new getDelivery_result();
        try {
          result.success = iface.getDelivery(args.accessToken, args.deliveryId);
        } catch (ServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class listDeliveries<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listDeliveries_args> {
      public listDeliveries() {
        super("listDeliveries");
      }

      public listDeliveries_args getEmptyArgsInstance() {
        return new listDeliveries_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listDeliveries_result getResult(I iface, listDeliveries_args args) throws org.apache.thrift.TException {
        listDeliveries_result result = new listDeliveries_result();
        try {
          result.success = iface.listDeliveries(args.accessToken, args.offset, args.limit);
        } catch (ServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class assignCourier<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assignCourier_args> {
      public assignCourier() {
        super("assignCourier");
      }

      public assignCourier_args getEmptyArgsInstance() {
        return new assignCourier_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assignCourier_result getResult(I iface, assignCourier_args args) throws org.apache.thrift.TException {
        assignCourier_result result = new assignCourier_result();
        try {
          result.success = iface.assignCourier(args.accessToken, args.deliveryId, args.courierId);
        } catch (ServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class cancelDelivery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelDelivery_args> {
      public cancelDelivery() {
        super("cancelDelivery");
      }

      public cancelDelivery_args getEmptyArgsInstance() {
        return new cancelDelivery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelDelivery_result getResult(I iface, cancelDelivery_args args) throws org.apache.thrift.TException {
        cancelDelivery_result result = new cancelDelivery_result();
        try {
          result.success = iface.cancelDelivery(args.accessToken, args.deliveryId);
        } catch (ServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class completeDelivery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, completeDelivery_args> {
      public completeDelivery() {
        super("completeDelivery");
      }

      public completeDelivery_args getEmptyArgsInstance() {
        return new completeDelivery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public completeDelivery_result getResult(I iface, completeDelivery_args args) throws org.apache.thrift.TException {
        completeDelivery_result result = new completeDelivery_result();
        try {
          result.success = iface.completeDelivery(args.accessToken, args.deliveryId);
        } catch (ServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("submitDelivery", new submitDelivery());
      processMap.put("getDelivery", new getDelivery());
      processMap.put("listDeliveries", new listDeliveries());
      processMap.put("assignCourier", new assignCourier());
      processMap.put("cancelDelivery", new cancelDelivery());
      processMap.put("completeDelivery", new completeDelivery());
      return processMap;
    }

    public static class submitDelivery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitDelivery_args, Delivery> {
      public submitDelivery() {
        super("submitDelivery");
      }

      public submitDelivery_args getEmptyArgsInstance() {
        return new submitDelivery_args();
      }

      public AsyncMethodCallback<Delivery> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Delivery>() { 
          public void onComplete(Delivery o) {
            submitDelivery_result result = new submitDelivery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitDelivery_result result = new submitDelivery_result();
            if (e instanceof ServiceException) {
                        result.e = (ServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitDelivery_args args, org.apache.thrift.async.AsyncMethodCallback<Delivery> resultHandler) throws TException {
        iface.submitDelivery(args.accessToken, args.delivery,resultHandler);
      }
    }

    public static class getDelivery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDelivery_args, Delivery> {
      public getDelivery() {
        super("getDelivery");
      }

      public getDelivery_args getEmptyArgsInstance() {
        return new getDelivery_args();
      }

      public AsyncMethodCallback<Delivery> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Delivery>() { 
          public void onComplete(Delivery o) {
            getDelivery_result result = new getDelivery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDelivery_result result = new getDelivery_result();
            if (e instanceof ServiceException) {
                        result.e = (ServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDelivery_args args, org.apache.thrift.async.AsyncMethodCallback<Delivery> resultHandler) throws TException {
        iface.getDelivery(args.accessToken, args.deliveryId,resultHandler);
      }
    }

    public static class listDeliveries<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listDeliveries_args, List<Delivery>> {
      public listDeliveries() {
        super("listDeliveries");
      }

      public listDeliveries_args getEmptyArgsInstance() {
        return new listDeliveries_args();
      }

      public AsyncMethodCallback<List<Delivery>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Delivery>>() { 
          public void onComplete(List<Delivery> o) {
            listDeliveries_result result = new listDeliveries_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listDeliveries_result result = new listDeliveries_result();
            if (e instanceof ServiceException) {
                        result.e = (ServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listDeliveries_args args, org.apache.thrift.async.AsyncMethodCallback<List<Delivery>> resultHandler) throws TException {
        iface.listDeliveries(args.accessToken, args.offset, args.limit,resultHandler);
      }
    }

    public static class assignCourier<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assignCourier_args, Delivery> {
      public assignCourier() {
        super("assignCourier");
      }

      public assignCourier_args getEmptyArgsInstance() {
        return new assignCourier_args();
      }

      public AsyncMethodCallback<Delivery> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Delivery>() { 
          public void onComplete(Delivery o) {
            assignCourier_result result = new assignCourier_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assignCourier_result result = new assignCourier_result();
            if (e instanceof ServiceException) {
                        result.e = (ServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assignCourier_args args, org.apache.thrift.async.AsyncMethodCallback<Delivery> resultHandler) throws TException {
        iface.assignCourier(args.accessToken, args.deliveryId, args.courierId,resultHandler);
      }
    }

    public static class cancelDelivery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelDelivery_args, Delivery> {
      public cancelDelivery() {
        super("cancelDelivery");
      }

      public cancelDelivery_args getEmptyArgsInstance() {
        return new cancelDelivery_args();
      }

      public AsyncMethodCallback<Delivery> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Delivery>() { 
          public void onComplete(Delivery o) {
            cancelDelivery_result result = new cancelDelivery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelDelivery_result result = new cancelDelivery_result();
            if (e instanceof ServiceException) {
                        result.e = (ServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelDelivery_args args, org.apache.thrift.async.AsyncMethodCallback<Delivery> resultHandler) throws TException {
        iface.cancelDelivery(args.accessToken, args.deliveryId,resultHandler);
      }
    }

    public static class completeDelivery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, completeDelivery_args, Delivery> {
      public completeDelivery() {
        super("completeDelivery");
      }

      public completeDelivery_args getEmptyArgsInstance() {
        return new completeDelivery_args();
      }

      public AsyncMethodCallback<Delivery> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Delivery>() { 
          public void onComplete(Delivery o) {
            completeDelivery_result result = new completeDelivery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            completeDelivery_result result = new completeDelivery_result();
            if (e instanceof ServiceException) {
                        result.e = (ServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, completeDelivery_args args, org.apache.thrift.async.AsyncMethodCallback<Delivery> resultHandler) throws TException {
        iface.completeDelivery(args.accessToken, args.deliveryId,resultHandler);
      }
    }

  }

  public static class submitDelivery_args implements org.apache.thrift.TBase<submitDelivery_args, submitDelivery_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitDelivery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitDelivery_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DELIVERY_FIELD_DESC = new org.apache.thrift.protocol.TField("delivery", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitDelivery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitDelivery_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public Delivery delivery; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      DELIVERY((short)2, "delivery");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // DELIVERY
            return DELIVERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "AccessToken")));
      tmpMap.put(_Fields.DELIVERY, new org.apache.thrift.meta_data.FieldMetaData("delivery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Delivery.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitDelivery_args.class, metaDataMap);
    }

    public submitDelivery_args() {
    }

    public submitDelivery_args(
      String accessToken,
      Delivery delivery)
    {
      this();
      this.accessToken = accessToken;
      this.delivery = delivery;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitDelivery_args(submitDelivery_args other) {
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetDelivery()) {
        this.delivery = new Delivery(other.delivery);
      }
    }

    public submitDelivery_args deepCopy() {
      return new submitDelivery_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      this.delivery = null;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public submitDelivery_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public Delivery getDelivery() {
      return this.delivery;
    }

    public submitDelivery_args setDelivery(Delivery delivery) {
      this.delivery = delivery;
      return this;
    }

    public void unsetDelivery() {
      this.delivery = null;
    }

    /** Returns true if field delivery is set (has been assigned a value) and false otherwise */
    public boolean isSetDelivery() {
      return this.delivery != null;
    }

    public void setDeliveryIsSet(boolean value) {
      if (!value) {
        this.delivery = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case DELIVERY:
        if (value == null) {
          unsetDelivery();
        } else {
          setDelivery((Delivery)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case DELIVERY:
        return getDelivery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case DELIVERY:
        return isSetDelivery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitDelivery_args)
        return this.equals((submitDelivery_args)that);
      return false;
    }

    public boolean equals(submitDelivery_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_delivery = true && this.isSetDelivery();
      boolean that_present_delivery = true && that.isSetDelivery();
      if (this_present_delivery || that_present_delivery) {
        if (!(this_present_delivery && that_present_delivery))
          return false;
        if (!this.delivery.equals(that.delivery))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_accessToken = true && (isSetAccessToken());
      list.add(present_accessToken);
      if (present_accessToken)
        list.add(accessToken);

      boolean present_delivery = true && (isSetDelivery());
      list.add(present_delivery);
      if (present_delivery)
        list.add(delivery);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitDelivery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDelivery()).compareTo(other.isSetDelivery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelivery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delivery, other.delivery);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitDelivery_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("delivery:");
      if (this.delivery == null) {
        sb.append("null");
      } else {
        sb.append(this.delivery);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (delivery != null) {
        delivery.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitDelivery_argsStandardSchemeFactory implements SchemeFactory {
      public submitDelivery_argsStandardScheme getScheme() {
        return new submitDelivery_argsStandardScheme();
      }
    }

    private static class submitDelivery_argsStandardScheme extends StandardScheme<submitDelivery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELIVERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.delivery = new Delivery();
                struct.delivery.read(iprot);
                struct.setDeliveryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitDelivery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.delivery != null) {
          oprot.writeFieldBegin(DELIVERY_FIELD_DESC);
          struct.delivery.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitDelivery_argsTupleSchemeFactory implements SchemeFactory {
      public submitDelivery_argsTupleScheme getScheme() {
        return new submitDelivery_argsTupleScheme();
      }
    }

    private static class submitDelivery_argsTupleScheme extends TupleScheme<submitDelivery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetDelivery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetDelivery()) {
          struct.delivery.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.delivery = new Delivery();
          struct.delivery.read(iprot);
          struct.setDeliveryIsSet(true);
        }
      }
    }

  }

  public static class submitDelivery_result implements org.apache.thrift.TBase<submitDelivery_result, submitDelivery_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitDelivery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitDelivery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitDelivery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitDelivery_resultTupleSchemeFactory());
    }

    public Delivery success; // required
    public ServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Delivery.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitDelivery_result.class, metaDataMap);
    }

    public submitDelivery_result() {
    }

    public submitDelivery_result(
      Delivery success,
      ServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitDelivery_result(submitDelivery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Delivery(other.success);
      }
      if (other.isSetE()) {
        this.e = new ServiceException(other.e);
      }
    }

    public submitDelivery_result deepCopy() {
      return new submitDelivery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Delivery getSuccess() {
      return this.success;
    }

    public submitDelivery_result setSuccess(Delivery success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getE() {
      return this.e;
    }

    public submitDelivery_result setE(ServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Delivery)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitDelivery_result)
        return this.equals((submitDelivery_result)that);
      return false;
    }

    public boolean equals(submitDelivery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitDelivery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitDelivery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitDelivery_resultStandardSchemeFactory implements SchemeFactory {
      public submitDelivery_resultStandardScheme getScheme() {
        return new submitDelivery_resultStandardScheme();
      }
    }

    private static class submitDelivery_resultStandardScheme extends StandardScheme<submitDelivery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Delivery();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitDelivery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitDelivery_resultTupleSchemeFactory implements SchemeFactory {
      public submitDelivery_resultTupleScheme getScheme() {
        return new submitDelivery_resultTupleScheme();
      }
    }

    private static class submitDelivery_resultTupleScheme extends TupleScheme<submitDelivery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Delivery();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getDelivery_args implements org.apache.thrift.TBase<getDelivery_args, getDelivery_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDelivery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDelivery_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DELIVERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDelivery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDelivery_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public int deliveryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      DELIVERY_ID((short)2, "deliveryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // DELIVERY_ID
            return DELIVERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DELIVERYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "AccessToken")));
      tmpMap.put(_Fields.DELIVERY_ID, new org.apache.thrift.meta_data.FieldMetaData("deliveryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDelivery_args.class, metaDataMap);
    }

    public getDelivery_args() {
    }

    public getDelivery_args(
      String accessToken,
      int deliveryId)
    {
      this();
      this.accessToken = accessToken;
      this.deliveryId = deliveryId;
      setDeliveryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDelivery_args(getDelivery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.deliveryId = other.deliveryId;
    }

    public getDelivery_args deepCopy() {
      return new getDelivery_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      setDeliveryIdIsSet(false);
      this.deliveryId = 0;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public getDelivery_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public int getDeliveryId() {
      return this.deliveryId;
    }

    public getDelivery_args setDeliveryId(int deliveryId) {
      this.deliveryId = deliveryId;
      setDeliveryIdIsSet(true);
      return this;
    }

    public void unsetDeliveryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYID_ISSET_ID);
    }

    /** Returns true if field deliveryId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeliveryId() {
      return EncodingUtils.testBit(__isset_bitfield, __DELIVERYID_ISSET_ID);
    }

    public void setDeliveryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case DELIVERY_ID:
        if (value == null) {
          unsetDeliveryId();
        } else {
          setDeliveryId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case DELIVERY_ID:
        return Integer.valueOf(getDeliveryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case DELIVERY_ID:
        return isSetDeliveryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDelivery_args)
        return this.equals((getDelivery_args)that);
      return false;
    }

    public boolean equals(getDelivery_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_deliveryId = true;
      boolean that_present_deliveryId = true;
      if (this_present_deliveryId || that_present_deliveryId) {
        if (!(this_present_deliveryId && that_present_deliveryId))
          return false;
        if (this.deliveryId != that.deliveryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_accessToken = true && (isSetAccessToken());
      list.add(present_accessToken);
      if (present_accessToken)
        list.add(accessToken);

      boolean present_deliveryId = true;
      list.add(present_deliveryId);
      if (present_deliveryId)
        list.add(deliveryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDelivery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeliveryId()).compareTo(other.isSetDeliveryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeliveryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryId, other.deliveryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDelivery_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deliveryId:");
      sb.append(this.deliveryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDelivery_argsStandardSchemeFactory implements SchemeFactory {
      public getDelivery_argsStandardScheme getScheme() {
        return new getDelivery_argsStandardScheme();
      }
    }

    private static class getDelivery_argsStandardScheme extends StandardScheme<getDelivery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELIVERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.deliveryId = iprot.readI32();
                struct.setDeliveryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDelivery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DELIVERY_ID_FIELD_DESC);
        oprot.writeI32(struct.deliveryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDelivery_argsTupleSchemeFactory implements SchemeFactory {
      public getDelivery_argsTupleScheme getScheme() {
        return new getDelivery_argsTupleScheme();
      }
    }

    private static class getDelivery_argsTupleScheme extends TupleScheme<getDelivery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetDeliveryId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetDeliveryId()) {
          oprot.writeI32(struct.deliveryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deliveryId = iprot.readI32();
          struct.setDeliveryIdIsSet(true);
        }
      }
    }

  }

  public static class getDelivery_result implements org.apache.thrift.TBase<getDelivery_result, getDelivery_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDelivery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDelivery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDelivery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDelivery_resultTupleSchemeFactory());
    }

    public Delivery success; // required
    public ServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Delivery.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDelivery_result.class, metaDataMap);
    }

    public getDelivery_result() {
    }

    public getDelivery_result(
      Delivery success,
      ServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDelivery_result(getDelivery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Delivery(other.success);
      }
      if (other.isSetE()) {
        this.e = new ServiceException(other.e);
      }
    }

    public getDelivery_result deepCopy() {
      return new getDelivery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Delivery getSuccess() {
      return this.success;
    }

    public getDelivery_result setSuccess(Delivery success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getE() {
      return this.e;
    }

    public getDelivery_result setE(ServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Delivery)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDelivery_result)
        return this.equals((getDelivery_result)that);
      return false;
    }

    public boolean equals(getDelivery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDelivery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDelivery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDelivery_resultStandardSchemeFactory implements SchemeFactory {
      public getDelivery_resultStandardScheme getScheme() {
        return new getDelivery_resultStandardScheme();
      }
    }

    private static class getDelivery_resultStandardScheme extends StandardScheme<getDelivery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Delivery();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDelivery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDelivery_resultTupleSchemeFactory implements SchemeFactory {
      public getDelivery_resultTupleScheme getScheme() {
        return new getDelivery_resultTupleScheme();
      }
    }

    private static class getDelivery_resultTupleScheme extends TupleScheme<getDelivery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Delivery();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class listDeliveries_args implements org.apache.thrift.TBase<listDeliveries_args, listDeliveries_args._Fields>, java.io.Serializable, Cloneable, Comparable<listDeliveries_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDeliveries_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDeliveries_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDeliveries_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public int offset; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      OFFSET((short)2, "offset"),
      LIMIT((short)3, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // OFFSET
            return OFFSET;
          case 3: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "AccessToken")));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDeliveries_args.class, metaDataMap);
    }

    public listDeliveries_args() {
    }

    public listDeliveries_args(
      String accessToken,
      int offset,
      int limit)
    {
      this();
      this.accessToken = accessToken;
      this.offset = offset;
      setOffsetIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDeliveries_args(listDeliveries_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.offset = other.offset;
      this.limit = other.limit;
    }

    public listDeliveries_args deepCopy() {
      return new listDeliveries_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public listDeliveries_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public listDeliveries_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public listDeliveries_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case OFFSET:
        return Integer.valueOf(getOffset());

      case LIMIT:
        return Integer.valueOf(getLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case OFFSET:
        return isSetOffset();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDeliveries_args)
        return this.equals((listDeliveries_args)that);
      return false;
    }

    public boolean equals(listDeliveries_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_accessToken = true && (isSetAccessToken());
      list.add(present_accessToken);
      if (present_accessToken)
        list.add(accessToken);

      boolean present_offset = true;
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDeliveries_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDeliveries_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDeliveries_argsStandardSchemeFactory implements SchemeFactory {
      public listDeliveries_argsStandardScheme getScheme() {
        return new listDeliveries_argsStandardScheme();
      }
    }

    private static class listDeliveries_argsStandardScheme extends StandardScheme<listDeliveries_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDeliveries_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDeliveries_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDeliveries_argsTupleSchemeFactory implements SchemeFactory {
      public listDeliveries_argsTupleScheme getScheme() {
        return new listDeliveries_argsTupleScheme();
      }
    }

    private static class listDeliveries_argsTupleScheme extends TupleScheme<listDeliveries_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDeliveries_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetOffset()) {
          optionals.set(1);
        }
        if (struct.isSetLimit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDeliveries_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class listDeliveries_result implements org.apache.thrift.TBase<listDeliveries_result, listDeliveries_result._Fields>, java.io.Serializable, Cloneable, Comparable<listDeliveries_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDeliveries_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDeliveries_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDeliveries_resultTupleSchemeFactory());
    }

    public List<Delivery> success; // required
    public ServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Delivery.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDeliveries_result.class, metaDataMap);
    }

    public listDeliveries_result() {
    }

    public listDeliveries_result(
      List<Delivery> success,
      ServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDeliveries_result(listDeliveries_result other) {
      if (other.isSetSuccess()) {
        List<Delivery> __this__success = new ArrayList<Delivery>(other.success.size());
        for (Delivery other_element : other.success) {
          __this__success.add(new Delivery(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ServiceException(other.e);
      }
    }

    public listDeliveries_result deepCopy() {
      return new listDeliveries_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Delivery> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Delivery elem) {
      if (this.success == null) {
        this.success = new ArrayList<Delivery>();
      }
      this.success.add(elem);
    }

    public List<Delivery> getSuccess() {
      return this.success;
    }

    public listDeliveries_result setSuccess(List<Delivery> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getE() {
      return this.e;
    }

    public listDeliveries_result setE(ServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Delivery>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDeliveries_result)
        return this.equals((listDeliveries_result)that);
      return false;
    }

    public boolean equals(listDeliveries_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(listDeliveries_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDeliveries_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDeliveries_resultStandardSchemeFactory implements SchemeFactory {
      public listDeliveries_resultStandardScheme getScheme() {
        return new listDeliveries_resultStandardScheme();
      }
    }

    private static class listDeliveries_resultStandardScheme extends StandardScheme<listDeliveries_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDeliveries_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Delivery>(_list0.size);
                  Delivery _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Delivery();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDeliveries_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Delivery _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDeliveries_resultTupleSchemeFactory implements SchemeFactory {
      public listDeliveries_resultTupleScheme getScheme() {
        return new listDeliveries_resultTupleScheme();
      }
    }

    private static class listDeliveries_resultTupleScheme extends TupleScheme<listDeliveries_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDeliveries_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Delivery _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDeliveries_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Delivery>(_list5.size);
            Delivery _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Delivery();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class assignCourier_args implements org.apache.thrift.TBase<assignCourier_args, assignCourier_args._Fields>, java.io.Serializable, Cloneable, Comparable<assignCourier_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignCourier_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DELIVERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COURIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courierId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assignCourier_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assignCourier_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public int deliveryId; // required
    public int courierId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      DELIVERY_ID((short)2, "deliveryId"),
      COURIER_ID((short)3, "courierId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // DELIVERY_ID
            return DELIVERY_ID;
          case 3: // COURIER_ID
            return COURIER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DELIVERYID_ISSET_ID = 0;
    private static final int __COURIERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "AccessToken")));
      tmpMap.put(_Fields.DELIVERY_ID, new org.apache.thrift.meta_data.FieldMetaData("deliveryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COURIER_ID, new org.apache.thrift.meta_data.FieldMetaData("courierId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignCourier_args.class, metaDataMap);
    }

    public assignCourier_args() {
    }

    public assignCourier_args(
      String accessToken,
      int deliveryId,
      int courierId)
    {
      this();
      this.accessToken = accessToken;
      this.deliveryId = deliveryId;
      setDeliveryIdIsSet(true);
      this.courierId = courierId;
      setCourierIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignCourier_args(assignCourier_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.deliveryId = other.deliveryId;
      this.courierId = other.courierId;
    }

    public assignCourier_args deepCopy() {
      return new assignCourier_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      setDeliveryIdIsSet(false);
      this.deliveryId = 0;
      setCourierIdIsSet(false);
      this.courierId = 0;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public assignCourier_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public int getDeliveryId() {
      return this.deliveryId;
    }

    public assignCourier_args setDeliveryId(int deliveryId) {
      this.deliveryId = deliveryId;
      setDeliveryIdIsSet(true);
      return this;
    }

    public void unsetDeliveryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYID_ISSET_ID);
    }

    /** Returns true if field deliveryId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeliveryId() {
      return EncodingUtils.testBit(__isset_bitfield, __DELIVERYID_ISSET_ID);
    }

    public void setDeliveryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYID_ISSET_ID, value);
    }

    public int getCourierId() {
      return this.courierId;
    }

    public assignCourier_args setCourierId(int courierId) {
      this.courierId = courierId;
      setCourierIdIsSet(true);
      return this;
    }

    public void unsetCourierId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURIERID_ISSET_ID);
    }

    /** Returns true if field courierId is set (has been assigned a value) and false otherwise */
    public boolean isSetCourierId() {
      return EncodingUtils.testBit(__isset_bitfield, __COURIERID_ISSET_ID);
    }

    public void setCourierIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURIERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case DELIVERY_ID:
        if (value == null) {
          unsetDeliveryId();
        } else {
          setDeliveryId((Integer)value);
        }
        break;

      case COURIER_ID:
        if (value == null) {
          unsetCourierId();
        } else {
          setCourierId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case DELIVERY_ID:
        return Integer.valueOf(getDeliveryId());

      case COURIER_ID:
        return Integer.valueOf(getCourierId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case DELIVERY_ID:
        return isSetDeliveryId();
      case COURIER_ID:
        return isSetCourierId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assignCourier_args)
        return this.equals((assignCourier_args)that);
      return false;
    }

    public boolean equals(assignCourier_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_deliveryId = true;
      boolean that_present_deliveryId = true;
      if (this_present_deliveryId || that_present_deliveryId) {
        if (!(this_present_deliveryId && that_present_deliveryId))
          return false;
        if (this.deliveryId != that.deliveryId)
          return false;
      }

      boolean this_present_courierId = true;
      boolean that_present_courierId = true;
      if (this_present_courierId || that_present_courierId) {
        if (!(this_present_courierId && that_present_courierId))
          return false;
        if (this.courierId != that.courierId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_accessToken = true && (isSetAccessToken());
      list.add(present_accessToken);
      if (present_accessToken)
        list.add(accessToken);

      boolean present_deliveryId = true;
      list.add(present_deliveryId);
      if (present_deliveryId)
        list.add(deliveryId);

      boolean present_courierId = true;
      list.add(present_courierId);
      if (present_courierId)
        list.add(courierId);

      return list.hashCode();
    }

    @Override
    public int compareTo(assignCourier_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeliveryId()).compareTo(other.isSetDeliveryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeliveryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryId, other.deliveryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCourierId()).compareTo(other.isSetCourierId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourierId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courierId, other.courierId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assignCourier_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deliveryId:");
      sb.append(this.deliveryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("courierId:");
      sb.append(this.courierId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignCourier_argsStandardSchemeFactory implements SchemeFactory {
      public assignCourier_argsStandardScheme getScheme() {
        return new assignCourier_argsStandardScheme();
      }
    }

    private static class assignCourier_argsStandardScheme extends StandardScheme<assignCourier_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignCourier_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELIVERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.deliveryId = iprot.readI32();
                struct.setDeliveryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COURIER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.courierId = iprot.readI32();
                struct.setCourierIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignCourier_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DELIVERY_ID_FIELD_DESC);
        oprot.writeI32(struct.deliveryId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COURIER_ID_FIELD_DESC);
        oprot.writeI32(struct.courierId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignCourier_argsTupleSchemeFactory implements SchemeFactory {
      public assignCourier_argsTupleScheme getScheme() {
        return new assignCourier_argsTupleScheme();
      }
    }

    private static class assignCourier_argsTupleScheme extends TupleScheme<assignCourier_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignCourier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetDeliveryId()) {
          optionals.set(1);
        }
        if (struct.isSetCourierId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetDeliveryId()) {
          oprot.writeI32(struct.deliveryId);
        }
        if (struct.isSetCourierId()) {
          oprot.writeI32(struct.courierId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignCourier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deliveryId = iprot.readI32();
          struct.setDeliveryIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.courierId = iprot.readI32();
          struct.setCourierIdIsSet(true);
        }
      }
    }

  }

  public static class assignCourier_result implements org.apache.thrift.TBase<assignCourier_result, assignCourier_result._Fields>, java.io.Serializable, Cloneable, Comparable<assignCourier_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignCourier_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assignCourier_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assignCourier_resultTupleSchemeFactory());
    }

    public Delivery success; // required
    public ServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Delivery.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignCourier_result.class, metaDataMap);
    }

    public assignCourier_result() {
    }

    public assignCourier_result(
      Delivery success,
      ServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignCourier_result(assignCourier_result other) {
      if (other.isSetSuccess()) {
        this.success = new Delivery(other.success);
      }
      if (other.isSetE()) {
        this.e = new ServiceException(other.e);
      }
    }

    public assignCourier_result deepCopy() {
      return new assignCourier_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Delivery getSuccess() {
      return this.success;
    }

    public assignCourier_result setSuccess(Delivery success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getE() {
      return this.e;
    }

    public assignCourier_result setE(ServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Delivery)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assignCourier_result)
        return this.equals((assignCourier_result)that);
      return false;
    }

    public boolean equals(assignCourier_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(assignCourier_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assignCourier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignCourier_resultStandardSchemeFactory implements SchemeFactory {
      public assignCourier_resultStandardScheme getScheme() {
        return new assignCourier_resultStandardScheme();
      }
    }

    private static class assignCourier_resultStandardScheme extends StandardScheme<assignCourier_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignCourier_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Delivery();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignCourier_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignCourier_resultTupleSchemeFactory implements SchemeFactory {
      public assignCourier_resultTupleScheme getScheme() {
        return new assignCourier_resultTupleScheme();
      }
    }

    private static class assignCourier_resultTupleScheme extends TupleScheme<assignCourier_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignCourier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignCourier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Delivery();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class cancelDelivery_args implements org.apache.thrift.TBase<cancelDelivery_args, cancelDelivery_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelDelivery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelDelivery_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DELIVERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelDelivery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelDelivery_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public int deliveryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      DELIVERY_ID((short)2, "deliveryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // DELIVERY_ID
            return DELIVERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DELIVERYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "AccessToken")));
      tmpMap.put(_Fields.DELIVERY_ID, new org.apache.thrift.meta_data.FieldMetaData("deliveryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelDelivery_args.class, metaDataMap);
    }

    public cancelDelivery_args() {
    }

    public cancelDelivery_args(
      String accessToken,
      int deliveryId)
    {
      this();
      this.accessToken = accessToken;
      this.deliveryId = deliveryId;
      setDeliveryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelDelivery_args(cancelDelivery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.deliveryId = other.deliveryId;
    }

    public cancelDelivery_args deepCopy() {
      return new cancelDelivery_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      setDeliveryIdIsSet(false);
      this.deliveryId = 0;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public cancelDelivery_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public int getDeliveryId() {
      return this.deliveryId;
    }

    public cancelDelivery_args setDeliveryId(int deliveryId) {
      this.deliveryId = deliveryId;
      setDeliveryIdIsSet(true);
      return this;
    }

    public void unsetDeliveryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYID_ISSET_ID);
    }

    /** Returns true if field deliveryId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeliveryId() {
      return EncodingUtils.testBit(__isset_bitfield, __DELIVERYID_ISSET_ID);
    }

    public void setDeliveryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case DELIVERY_ID:
        if (value == null) {
          unsetDeliveryId();
        } else {
          setDeliveryId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case DELIVERY_ID:
        return Integer.valueOf(getDeliveryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case DELIVERY_ID:
        return isSetDeliveryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelDelivery_args)
        return this.equals((cancelDelivery_args)that);
      return false;
    }

    public boolean equals(cancelDelivery_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_deliveryId = true;
      boolean that_present_deliveryId = true;
      if (this_present_deliveryId || that_present_deliveryId) {
        if (!(this_present_deliveryId && that_present_deliveryId))
          return false;
        if (this.deliveryId != that.deliveryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_accessToken = true && (isSetAccessToken());
      list.add(present_accessToken);
      if (present_accessToken)
        list.add(accessToken);

      boolean present_deliveryId = true;
      list.add(present_deliveryId);
      if (present_deliveryId)
        list.add(deliveryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelDelivery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeliveryId()).compareTo(other.isSetDeliveryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeliveryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryId, other.deliveryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelDelivery_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deliveryId:");
      sb.append(this.deliveryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelDelivery_argsStandardSchemeFactory implements SchemeFactory {
      public cancelDelivery_argsStandardScheme getScheme() {
        return new cancelDelivery_argsStandardScheme();
      }
    }

    private static class cancelDelivery_argsStandardScheme extends StandardScheme<cancelDelivery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELIVERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.deliveryId = iprot.readI32();
                struct.setDeliveryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelDelivery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DELIVERY_ID_FIELD_DESC);
        oprot.writeI32(struct.deliveryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelDelivery_argsTupleSchemeFactory implements SchemeFactory {
      public cancelDelivery_argsTupleScheme getScheme() {
        return new cancelDelivery_argsTupleScheme();
      }
    }

    private static class cancelDelivery_argsTupleScheme extends TupleScheme<cancelDelivery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetDeliveryId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetDeliveryId()) {
          oprot.writeI32(struct.deliveryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deliveryId = iprot.readI32();
          struct.setDeliveryIdIsSet(true);
        }
      }
    }

  }

  public static class cancelDelivery_result implements org.apache.thrift.TBase<cancelDelivery_result, cancelDelivery_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelDelivery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelDelivery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelDelivery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelDelivery_resultTupleSchemeFactory());
    }

    public Delivery success; // required
    public ServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Delivery.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelDelivery_result.class, metaDataMap);
    }

    public cancelDelivery_result() {
    }

    public cancelDelivery_result(
      Delivery success,
      ServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelDelivery_result(cancelDelivery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Delivery(other.success);
      }
      if (other.isSetE()) {
        this.e = new ServiceException(other.e);
      }
    }

    public cancelDelivery_result deepCopy() {
      return new cancelDelivery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Delivery getSuccess() {
      return this.success;
    }

    public cancelDelivery_result setSuccess(Delivery success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getE() {
      return this.e;
    }

    public cancelDelivery_result setE(ServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Delivery)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelDelivery_result)
        return this.equals((cancelDelivery_result)that);
      return false;
    }

    public boolean equals(cancelDelivery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelDelivery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelDelivery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelDelivery_resultStandardSchemeFactory implements SchemeFactory {
      public cancelDelivery_resultStandardScheme getScheme() {
        return new cancelDelivery_resultStandardScheme();
      }
    }

    private static class cancelDelivery_resultStandardScheme extends StandardScheme<cancelDelivery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Delivery();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelDelivery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelDelivery_resultTupleSchemeFactory implements SchemeFactory {
      public cancelDelivery_resultTupleScheme getScheme() {
        return new cancelDelivery_resultTupleScheme();
      }
    }

    private static class cancelDelivery_resultTupleScheme extends TupleScheme<cancelDelivery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Delivery();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class completeDelivery_args implements org.apache.thrift.TBase<completeDelivery_args, completeDelivery_args._Fields>, java.io.Serializable, Cloneable, Comparable<completeDelivery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completeDelivery_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DELIVERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new completeDelivery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new completeDelivery_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public int deliveryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      DELIVERY_ID((short)2, "deliveryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // DELIVERY_ID
            return DELIVERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DELIVERYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "AccessToken")));
      tmpMap.put(_Fields.DELIVERY_ID, new org.apache.thrift.meta_data.FieldMetaData("deliveryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completeDelivery_args.class, metaDataMap);
    }

    public completeDelivery_args() {
    }

    public completeDelivery_args(
      String accessToken,
      int deliveryId)
    {
      this();
      this.accessToken = accessToken;
      this.deliveryId = deliveryId;
      setDeliveryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completeDelivery_args(completeDelivery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.deliveryId = other.deliveryId;
    }

    public completeDelivery_args deepCopy() {
      return new completeDelivery_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      setDeliveryIdIsSet(false);
      this.deliveryId = 0;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public completeDelivery_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public int getDeliveryId() {
      return this.deliveryId;
    }

    public completeDelivery_args setDeliveryId(int deliveryId) {
      this.deliveryId = deliveryId;
      setDeliveryIdIsSet(true);
      return this;
    }

    public void unsetDeliveryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYID_ISSET_ID);
    }

    /** Returns true if field deliveryId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeliveryId() {
      return EncodingUtils.testBit(__isset_bitfield, __DELIVERYID_ISSET_ID);
    }

    public void setDeliveryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case DELIVERY_ID:
        if (value == null) {
          unsetDeliveryId();
        } else {
          setDeliveryId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case DELIVERY_ID:
        return Integer.valueOf(getDeliveryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case DELIVERY_ID:
        return isSetDeliveryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completeDelivery_args)
        return this.equals((completeDelivery_args)that);
      return false;
    }

    public boolean equals(completeDelivery_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_deliveryId = true;
      boolean that_present_deliveryId = true;
      if (this_present_deliveryId || that_present_deliveryId) {
        if (!(this_present_deliveryId && that_present_deliveryId))
          return false;
        if (this.deliveryId != that.deliveryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_accessToken = true && (isSetAccessToken());
      list.add(present_accessToken);
      if (present_accessToken)
        list.add(accessToken);

      boolean present_deliveryId = true;
      list.add(present_deliveryId);
      if (present_deliveryId)
        list.add(deliveryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(completeDelivery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeliveryId()).compareTo(other.isSetDeliveryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeliveryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryId, other.deliveryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completeDelivery_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deliveryId:");
      sb.append(this.deliveryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completeDelivery_argsStandardSchemeFactory implements SchemeFactory {
      public completeDelivery_argsStandardScheme getScheme() {
        return new completeDelivery_argsStandardScheme();
      }
    }

    private static class completeDelivery_argsStandardScheme extends StandardScheme<completeDelivery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completeDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELIVERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.deliveryId = iprot.readI32();
                struct.setDeliveryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completeDelivery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DELIVERY_ID_FIELD_DESC);
        oprot.writeI32(struct.deliveryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completeDelivery_argsTupleSchemeFactory implements SchemeFactory {
      public completeDelivery_argsTupleScheme getScheme() {
        return new completeDelivery_argsTupleScheme();
      }
    }

    private static class completeDelivery_argsTupleScheme extends TupleScheme<completeDelivery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completeDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetDeliveryId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetDeliveryId()) {
          oprot.writeI32(struct.deliveryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completeDelivery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deliveryId = iprot.readI32();
          struct.setDeliveryIdIsSet(true);
        }
      }
    }

  }

  public static class completeDelivery_result implements org.apache.thrift.TBase<completeDelivery_result, completeDelivery_result._Fields>, java.io.Serializable, Cloneable, Comparable<completeDelivery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completeDelivery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new completeDelivery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new completeDelivery_resultTupleSchemeFactory());
    }

    public Delivery success; // required
    public ServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Delivery.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completeDelivery_result.class, metaDataMap);
    }

    public completeDelivery_result() {
    }

    public completeDelivery_result(
      Delivery success,
      ServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completeDelivery_result(completeDelivery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Delivery(other.success);
      }
      if (other.isSetE()) {
        this.e = new ServiceException(other.e);
      }
    }

    public completeDelivery_result deepCopy() {
      return new completeDelivery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Delivery getSuccess() {
      return this.success;
    }

    public completeDelivery_result setSuccess(Delivery success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getE() {
      return this.e;
    }

    public completeDelivery_result setE(ServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Delivery)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completeDelivery_result)
        return this.equals((completeDelivery_result)that);
      return false;
    }

    public boolean equals(completeDelivery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(completeDelivery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("completeDelivery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completeDelivery_resultStandardSchemeFactory implements SchemeFactory {
      public completeDelivery_resultStandardScheme getScheme() {
        return new completeDelivery_resultStandardScheme();
      }
    }

    private static class completeDelivery_resultStandardScheme extends StandardScheme<completeDelivery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completeDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Delivery();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completeDelivery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completeDelivery_resultTupleSchemeFactory implements SchemeFactory {
      public completeDelivery_resultTupleScheme getScheme() {
        return new completeDelivery_resultTupleScheme();
      }
    }

    private static class completeDelivery_resultTupleScheme extends TupleScheme<completeDelivery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completeDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completeDelivery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Delivery();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
