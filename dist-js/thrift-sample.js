//
// Thrift Javascript Library Patch
//
// Until the latest Thrift library (1.0.0-dev), Thrift.Protocol.prototype.skip was not implemented.
// This implementation should be removed when the official implementation is available.
//
(function(Thrift, undefined) {
Thrift.Protocol.prototype.skip = function(type) {
  var ret;
  switch(type) {
    case Thrift.Type.STOP:
      return null;

    case Thrift.Type.BOOL:
      return this.readBool();

    case Thrift.Type.BYTE:
      return this.readByte();

    case Thrift.Type.I16:
      return this.readI16();

    case Thrift.Type.I32:
      return this.readI32();

    case Thrift.Type.I64:
      return this.readI64();

    case Thrift.Type.DOUBLE:
      return this.readDouble();

    case Thrift.Type.STRING:
      return this.readString();

    case Thrift.Type.STRUCT:
      this.readStructBegin();
      while (true) {
        var ret = this.readFieldBegin();
        if(ret.ftype == Thrift.Type.STOP) {
          break;
        }
        this.skip(ret.ftype);
        this.readFieldEnd();
      }
      this.readStructEnd();
      return null;

    case Thrift.Type.MAP:
      ret = this.readMapBegin();
      for(var i = 0; i < ret.size; i++) {
        if(i > 0) {
          if(this.rstack.length > this.rpos[this.rpos.length - 1] + 1) {
            this.rstack.pop();
          }
        }
        this.skip(ret.ktype);
        this.skip(ret.vtype);
      }
      this.readMapEnd();
      return null;

    case Thrift.Type.SET:
      ret = this.readSetBegin();
      for (var i = 0; i < ret.size; i++) {
        this.skip(ret.etype);
      }
      this.readSetEnd();
      return null;

    case Thrift.Type.LIST:
      ret = this.readListBegin();
      for (var i = 0; i < ret.size; i++) {
        this.skip(ret.etype);
      }
      this.readListEnd();
      return null;
  }
};
})(window.Thrift);
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof Mesh === 'undefined') {
  Mesh = {};
}
if (typeof Mesh.Delivery === 'undefined') {
  Mesh.Delivery = {};
}
Mesh.Delivery.DeliveryStatus = {
  'SUBMITTED' : 1,
  'DELIVERING' : 2,
  'COMPLETED' : 10,
  'CANCELLED' : 11
};
Mesh.Delivery.Gender = {
  'FEMALE' : 1,
  'MALE' : 2
};
Mesh.Delivery.ErrorCode = {
  'UNKNOWN' : 1,
  'BAD_DATA_FORMAT' : 2,
  'DATA_REQUIRED' : 3,
  'INVALID_AUTH' : 4
};
Mesh.Delivery.Courier = function(args) {
  this.id = null;
  this.name = null;
  this.phone = null;
  this.gender = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.gender !== undefined) {
      this.gender = args.gender;
    }
  }
};
Mesh.Delivery.Courier.prototype = {};
Mesh.Delivery.Courier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.gender = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.Courier.prototype.write = function(output) {
  output.writeStructBegin('Courier');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 3);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.I32, 4);
    output.writeI32(this.gender);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.LatLng = function(args) {
  this.lat = null;
  this.lng = null;
  if (args) {
    if (args.lat !== undefined) {
      this.lat = args.lat;
    }
    if (args.lng !== undefined) {
      this.lng = args.lng;
    }
  }
};
Mesh.Delivery.LatLng.prototype = {};
Mesh.Delivery.LatLng.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lat = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lng = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.LatLng.prototype.write = function(output) {
  output.writeStructBegin('LatLng');
  if (this.lat !== null && this.lat !== undefined) {
    output.writeFieldBegin('lat', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.lat);
    output.writeFieldEnd();
  }
  if (this.lng !== null && this.lng !== undefined) {
    output.writeFieldBegin('lng', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.lng);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.Delivery = function(args) {
  this.id = null;
  this.origin = null;
  this.destination = null;
  this.status = null;
  this.courier = null;
  this.createdAt = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.origin !== undefined) {
      this.origin = args.origin;
    }
    if (args.destination !== undefined) {
      this.destination = args.destination;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.courier !== undefined) {
      this.courier = args.courier;
    }
    if (args.createdAt !== undefined) {
      this.createdAt = args.createdAt;
    }
  }
};
Mesh.Delivery.Delivery.prototype = {};
Mesh.Delivery.Delivery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.origin = new Mesh.Delivery.LatLng();
        this.origin.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.destination = new Mesh.Delivery.LatLng();
        this.destination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.courier = new Mesh.Delivery.Courier();
        this.courier.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createdAt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.Delivery.prototype.write = function(output) {
  output.writeStructBegin('Delivery');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.origin !== null && this.origin !== undefined) {
    output.writeFieldBegin('origin', Thrift.Type.STRUCT, 2);
    this.origin.write(output);
    output.writeFieldEnd();
  }
  if (this.destination !== null && this.destination !== undefined) {
    output.writeFieldBegin('destination', Thrift.Type.STRUCT, 3);
    this.destination.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.courier !== null && this.courier !== undefined) {
    output.writeFieldBegin('courier', Thrift.Type.STRUCT, 5);
    this.courier.write(output);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.I64, 6);
    output.writeI64(this.createdAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.ServiceException = function(args) {
  this.code = null;
  this.parameter = null;
  this.message = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.parameter !== undefined) {
      this.parameter = args.parameter;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(Mesh.Delivery.ServiceException, Thrift.TException);
Mesh.Delivery.ServiceException.prototype.name = 'ServiceException';
Mesh.Delivery.ServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parameter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.ServiceException.prototype.write = function(output) {
  output.writeStructBegin('ServiceException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.STRING, 2);
    output.writeString(this.parameter);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Mesh.Delivery.DeliveryService_submitDelivery_args = function(args) {
  this.accessToken = null;
  this.delivery = null;
  if (args) {
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    }
    if (args.delivery !== undefined) {
      this.delivery = args.delivery;
    }
  }
};
Mesh.Delivery.DeliveryService_submitDelivery_args.prototype = {};
Mesh.Delivery.DeliveryService_submitDelivery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.delivery = new Mesh.Delivery.Delivery();
        this.delivery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_submitDelivery_args.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_submitDelivery_args');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.delivery !== null && this.delivery !== undefined) {
    output.writeFieldBegin('delivery', Thrift.Type.STRUCT, 2);
    this.delivery.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_submitDelivery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Mesh.Delivery.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Mesh.Delivery.DeliveryService_submitDelivery_result.prototype = {};
Mesh.Delivery.DeliveryService_submitDelivery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Mesh.Delivery.Delivery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Mesh.Delivery.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_submitDelivery_result.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_submitDelivery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_getDelivery_args = function(args) {
  this.accessToken = null;
  this.deliveryId = null;
  if (args) {
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    }
    if (args.deliveryId !== undefined) {
      this.deliveryId = args.deliveryId;
    }
  }
};
Mesh.Delivery.DeliveryService_getDelivery_args.prototype = {};
Mesh.Delivery.DeliveryService_getDelivery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deliveryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_getDelivery_args.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_getDelivery_args');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.deliveryId !== null && this.deliveryId !== undefined) {
    output.writeFieldBegin('deliveryId', Thrift.Type.I32, 2);
    output.writeI32(this.deliveryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_getDelivery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Mesh.Delivery.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Mesh.Delivery.DeliveryService_getDelivery_result.prototype = {};
Mesh.Delivery.DeliveryService_getDelivery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Mesh.Delivery.Delivery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Mesh.Delivery.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_getDelivery_result.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_getDelivery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_listDeliveries_args = function(args) {
  this.accessToken = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
  }
};
Mesh.Delivery.DeliveryService_listDeliveries_args.prototype = {};
Mesh.Delivery.DeliveryService_listDeliveries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_listDeliveries_args.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_listDeliveries_args');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 2);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_listDeliveries_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Mesh.Delivery.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Mesh.Delivery.DeliveryService_listDeliveries_result.prototype = {};
Mesh.Delivery.DeliveryService_listDeliveries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Mesh.Delivery.Delivery();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Mesh.Delivery.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_listDeliveries_result.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_listDeliveries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_assignCourier_args = function(args) {
  this.accessToken = null;
  this.deliveryId = null;
  this.courierId = null;
  if (args) {
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    }
    if (args.deliveryId !== undefined) {
      this.deliveryId = args.deliveryId;
    }
    if (args.courierId !== undefined) {
      this.courierId = args.courierId;
    }
  }
};
Mesh.Delivery.DeliveryService_assignCourier_args.prototype = {};
Mesh.Delivery.DeliveryService_assignCourier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deliveryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.courierId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_assignCourier_args.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_assignCourier_args');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.deliveryId !== null && this.deliveryId !== undefined) {
    output.writeFieldBegin('deliveryId', Thrift.Type.I32, 2);
    output.writeI32(this.deliveryId);
    output.writeFieldEnd();
  }
  if (this.courierId !== null && this.courierId !== undefined) {
    output.writeFieldBegin('courierId', Thrift.Type.I32, 3);
    output.writeI32(this.courierId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_assignCourier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Mesh.Delivery.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Mesh.Delivery.DeliveryService_assignCourier_result.prototype = {};
Mesh.Delivery.DeliveryService_assignCourier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Mesh.Delivery.Delivery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Mesh.Delivery.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_assignCourier_result.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_assignCourier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_cancelDelivery_args = function(args) {
  this.accessToken = null;
  this.deliveryId = null;
  if (args) {
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    }
    if (args.deliveryId !== undefined) {
      this.deliveryId = args.deliveryId;
    }
  }
};
Mesh.Delivery.DeliveryService_cancelDelivery_args.prototype = {};
Mesh.Delivery.DeliveryService_cancelDelivery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deliveryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_cancelDelivery_args.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_cancelDelivery_args');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.deliveryId !== null && this.deliveryId !== undefined) {
    output.writeFieldBegin('deliveryId', Thrift.Type.I32, 2);
    output.writeI32(this.deliveryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_cancelDelivery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Mesh.Delivery.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Mesh.Delivery.DeliveryService_cancelDelivery_result.prototype = {};
Mesh.Delivery.DeliveryService_cancelDelivery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Mesh.Delivery.Delivery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Mesh.Delivery.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_cancelDelivery_result.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_cancelDelivery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_completeDelivery_args = function(args) {
  this.accessToken = null;
  this.deliveryId = null;
  if (args) {
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    }
    if (args.deliveryId !== undefined) {
      this.deliveryId = args.deliveryId;
    }
  }
};
Mesh.Delivery.DeliveryService_completeDelivery_args.prototype = {};
Mesh.Delivery.DeliveryService_completeDelivery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deliveryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_completeDelivery_args.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_completeDelivery_args');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.deliveryId !== null && this.deliveryId !== undefined) {
    output.writeFieldBegin('deliveryId', Thrift.Type.I32, 2);
    output.writeI32(this.deliveryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_completeDelivery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Mesh.Delivery.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
Mesh.Delivery.DeliveryService_completeDelivery_result.prototype = {};
Mesh.Delivery.DeliveryService_completeDelivery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Mesh.Delivery.Delivery();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Mesh.Delivery.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mesh.Delivery.DeliveryService_completeDelivery_result.prototype.write = function(output) {
  output.writeStructBegin('DeliveryService_completeDelivery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mesh.Delivery.DeliveryServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Mesh.Delivery.DeliveryServiceClient.prototype = {};
Mesh.Delivery.DeliveryServiceClient.prototype.submitDelivery = function(accessToken, delivery, callback) {
  if (callback === undefined) {
    this.send_submitDelivery(accessToken, delivery);
    return this.recv_submitDelivery();
  } else {
    var postData = this.send_submitDelivery(accessToken, delivery, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_submitDelivery);
  }
};

Mesh.Delivery.DeliveryServiceClient.prototype.send_submitDelivery = function(accessToken, delivery, callback) {
  this.output.writeMessageBegin('submitDelivery', Thrift.MessageType.CALL, this.seqid);
  var args = new Mesh.Delivery.DeliveryService_submitDelivery_args();
  args.accessToken = accessToken;
  args.delivery = delivery;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Mesh.Delivery.DeliveryServiceClient.prototype.recv_submitDelivery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Mesh.Delivery.DeliveryService_submitDelivery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'submitDelivery failed: unknown result';
};
Mesh.Delivery.DeliveryServiceClient.prototype.getDelivery = function(accessToken, deliveryId, callback) {
  if (callback === undefined) {
    this.send_getDelivery(accessToken, deliveryId);
    return this.recv_getDelivery();
  } else {
    var postData = this.send_getDelivery(accessToken, deliveryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDelivery);
  }
};

Mesh.Delivery.DeliveryServiceClient.prototype.send_getDelivery = function(accessToken, deliveryId, callback) {
  this.output.writeMessageBegin('getDelivery', Thrift.MessageType.CALL, this.seqid);
  var args = new Mesh.Delivery.DeliveryService_getDelivery_args();
  args.accessToken = accessToken;
  args.deliveryId = deliveryId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Mesh.Delivery.DeliveryServiceClient.prototype.recv_getDelivery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Mesh.Delivery.DeliveryService_getDelivery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDelivery failed: unknown result';
};
Mesh.Delivery.DeliveryServiceClient.prototype.listDeliveries = function(accessToken, offset, limit, callback) {
  if (callback === undefined) {
    this.send_listDeliveries(accessToken, offset, limit);
    return this.recv_listDeliveries();
  } else {
    var postData = this.send_listDeliveries(accessToken, offset, limit, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_listDeliveries);
  }
};

Mesh.Delivery.DeliveryServiceClient.prototype.send_listDeliveries = function(accessToken, offset, limit, callback) {
  this.output.writeMessageBegin('listDeliveries', Thrift.MessageType.CALL, this.seqid);
  var args = new Mesh.Delivery.DeliveryService_listDeliveries_args();
  args.accessToken = accessToken;
  args.offset = offset;
  args.limit = limit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Mesh.Delivery.DeliveryServiceClient.prototype.recv_listDeliveries = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Mesh.Delivery.DeliveryService_listDeliveries_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listDeliveries failed: unknown result';
};
Mesh.Delivery.DeliveryServiceClient.prototype.assignCourier = function(accessToken, deliveryId, courierId, callback) {
  if (callback === undefined) {
    this.send_assignCourier(accessToken, deliveryId, courierId);
    return this.recv_assignCourier();
  } else {
    var postData = this.send_assignCourier(accessToken, deliveryId, courierId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_assignCourier);
  }
};

Mesh.Delivery.DeliveryServiceClient.prototype.send_assignCourier = function(accessToken, deliveryId, courierId, callback) {
  this.output.writeMessageBegin('assignCourier', Thrift.MessageType.CALL, this.seqid);
  var args = new Mesh.Delivery.DeliveryService_assignCourier_args();
  args.accessToken = accessToken;
  args.deliveryId = deliveryId;
  args.courierId = courierId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Mesh.Delivery.DeliveryServiceClient.prototype.recv_assignCourier = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Mesh.Delivery.DeliveryService_assignCourier_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'assignCourier failed: unknown result';
};
Mesh.Delivery.DeliveryServiceClient.prototype.cancelDelivery = function(accessToken, deliveryId, callback) {
  if (callback === undefined) {
    this.send_cancelDelivery(accessToken, deliveryId);
    return this.recv_cancelDelivery();
  } else {
    var postData = this.send_cancelDelivery(accessToken, deliveryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_cancelDelivery);
  }
};

Mesh.Delivery.DeliveryServiceClient.prototype.send_cancelDelivery = function(accessToken, deliveryId, callback) {
  this.output.writeMessageBegin('cancelDelivery', Thrift.MessageType.CALL, this.seqid);
  var args = new Mesh.Delivery.DeliveryService_cancelDelivery_args();
  args.accessToken = accessToken;
  args.deliveryId = deliveryId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Mesh.Delivery.DeliveryServiceClient.prototype.recv_cancelDelivery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Mesh.Delivery.DeliveryService_cancelDelivery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'cancelDelivery failed: unknown result';
};
Mesh.Delivery.DeliveryServiceClient.prototype.completeDelivery = function(accessToken, deliveryId, callback) {
  if (callback === undefined) {
    this.send_completeDelivery(accessToken, deliveryId);
    return this.recv_completeDelivery();
  } else {
    var postData = this.send_completeDelivery(accessToken, deliveryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_completeDelivery);
  }
};

Mesh.Delivery.DeliveryServiceClient.prototype.send_completeDelivery = function(accessToken, deliveryId, callback) {
  this.output.writeMessageBegin('completeDelivery', Thrift.MessageType.CALL, this.seqid);
  var args = new Mesh.Delivery.DeliveryService_completeDelivery_args();
  args.accessToken = accessToken;
  args.deliveryId = deliveryId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Mesh.Delivery.DeliveryServiceClient.prototype.recv_completeDelivery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Mesh.Delivery.DeliveryService_completeDelivery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'completeDelivery failed: unknown result';
};
